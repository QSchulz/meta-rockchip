This README file contains information on building the meta-rockchip
BSP layer, and booting images.
Please see the corresponding sections below for details.


Dependencies
============

This layer depends on:

  {
  	URI: git://git.openembedded.org/bitbake
	branch: master, fido

  	AND

  	URI: git://git.openembedded.org/openembedded-core
  	layers: meta
	branch: master, fido
  }

  OR

  URI: git://git.yoctoproject.org/poky
  branch: master, fido


Patches
=======

Please submit any patches against this BSP to
https://github.com/linux-rockchip/meta-rockchip and cc: the maintainer:

Maintainer: Romain Perier <romain.perier@gmail.com>

Table of Contents
=================

  I. Configure yocto/oe environment
 II. Rockchip boot overview

I. Configure yocto/oe environment
========================================

In order to build an image with BSP support for a given release, you
need to download the corresponding tools described in the "Dependencies"
section. Be sure that everything is in the same directory.

~ $ mkdir yocto; cd yocto
~/yocto $ git clone git://git.yoctoproject.org/poky -b fido
~/yocto $ git clone https://github.com/linux-rockchip/meta-rockchip.git

Then you need to source the configuration script:
~/yocto $ source poky/oe-init-build-env

Having done that, you can build a
image for a rockchip board by adding the location of the meta-rockchip
layer to bblayers.conf, along with any other layers needed (to access
common metadata shared between BSPs) e.g.:

  /path/to/yocto/poky/meta     \
  /path/to/yocto/meta-rockchip \

To enable the build for a specific board, add its name in the MACHINE variable to local.conf:

  MACHINE ?= "radxa-rock"

All supported machines can be found in meta-rockchip/conf/machine.

You should then be able to build a image as such:

  $ bitbake core-image-minimal

At the end of a successful build, you should have an image in
/path/to/yocto/build/tmp/deploy/<MACHINE>/<IMAGE_NAME>. See Yocto
manual for more details.

II. Rockchip boot overview
==========================

Rockchip SoCs have a "mask ROM" which contains a very minimal, fail-safe boot
program which is the first thing the chip runs when it is first powered on, or
when it comes out of reset. This boot program first tries to find something to
boot from the attached eMMC storage. If it can't find anything to boot in eMMC
it will then try to find something to boot from the attached uSD card (labeled
as TFCARD on the firefly).

If you want to build your own image you need to do one of the following:
1. load your image to a uSD card and then upload a minimal image to eMMC which
   will transfer control to the uSD card (and boot whatever it finds there)
2. upload your image to the eMMC
3. load your image to a uSD card and then erase or corrupt the eMMC so the
   boot program will look at the uSD card

This OpenEmbedded BSP contains resources necessary to perform options 1 or 2.
For option 1 please see README.uSD
For option 2 using a Firefly please see README.firefly-eMMC
